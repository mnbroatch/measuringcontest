AWSTemplateFormatVersion: '2010-09-09'
Description: Single boardgame.io server with direct IPv6 connection and Route53 AAAA record

Parameters:
  EC2InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for boardgame.io server
  VpcStackName:
    Type: String
    Description: Name of the VPC stack that exports VpcId and PublicSubnets
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    Description: SSM parameter path for the latest Amazon Linux 2023 AMI
  HostedZoneId:
    Type: String
    Description: Route53 Hosted Zone ID (e.g., Z1234567890ABC)
  DomainName:
    Type: String
    Description: Full domain name for the AAAA record (e.g., game.example.com)

Resources:
  # --- IAM Role for EC2 ---
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Policies:
        - PolicyName: SSMParameterAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                Resource: !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/boardgame/*"

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: 
        - !Ref EC2Role

  # --- Lambda Role for Getting IPv6 Address ---
  GetIPv6LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeInstances
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                Resource: '*'

  # --- Lambda Function to Retrieve IPv6 Address ---
  GetIPv6Function:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-GetIPv6Address"
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt GetIPv6LambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              print(f"Received event: {event}")
              try:
                  if event['RequestType'] == 'Delete':
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      return
                  
                  instance_id = event['ResourceProperties']['InstanceId']
                  ec2 = boto3.client('ec2')
                  
                  # Retry logic in case the instance isn't fully ready
                  max_retries = 10
                  for attempt in range(max_retries):
                      response = ec2.describe_instances(InstanceIds=[instance_id])
                      
                      if not response['Reservations'] or not response['Reservations'][0]['Instances']:
                          raise Exception(f"Instance {instance_id} not found")
                      
                      instance = response['Reservations'][0]['Instances'][0]
                      
                      # Get the first IPv6 address
                      ipv6_address = None
                      if 'NetworkInterfaces' in instance and instance['NetworkInterfaces']:
                          for ni in instance['NetworkInterfaces']:
                              if 'Ipv6Addresses' in ni and ni['Ipv6Addresses']:
                                  ipv6_address = ni['Ipv6Addresses'][0]['Ipv6Address']
                                  break
                      
                      if ipv6_address:
                          print(f"Found IPv6 address: {ipv6_address}")
                          response_data = {'Ipv6Address': ipv6_address}
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
                          return
                      
                      if attempt < max_retries - 1:
                          print(f"IPv6 address not yet available, retrying in 5 seconds... (attempt {attempt + 1}/{max_retries})")
                          time.sleep(5)
                  
                  raise Exception("No IPv6 address found for instance after retries")
                  
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, str(e))

  # --- Security Group ---
  BoardgameSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for boardgame.io server with public SSM access
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${VpcStackName}-VpcId"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIpv6: ::/0
          Description: Boardgame.io public access over IPv6
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS IPv4 for AWS API access (SSM, ECR)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP IPv4 for package downloads
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: ::/0
          Description: HTTPS IPv6 for AWS API access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
          Description: HTTP IPv6 for package downloads

  # --- EC2 Instance ---
  BoardgameInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref BoardgameSecurityGroup
      SubnetId: !Select
        - 0
        - !Split
          - ","
          - Fn::ImportValue:
              Fn::Sub: "${VpcStackName}-PublicSubnets"
      Ipv6AddressCount: 1
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-BoardgameServer"
        - Key: Application
          Value: Boardgame.io
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          set -e
          dnf update -y
          dnf install -y docker unzip
          systemctl enable docker
          systemctl start docker
          usermod -aG docker ec2-user

          if ! command -v aws &> /dev/null; then
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              unzip awscliv2.zip
              ./aws/install
              rm -rf awscliv2.zip aws/
          fi

          cat > /home/ec2-user/deploy.sh << 'EOF'
          #!/bin/bash
          set -euo pipefail

          IMAGE="${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/board-game-server"
          TAG=$(aws ssm get-parameter --name "/boardgame/image-tag" --query "Parameter.Value" --output text --region ${AWS::Region} 2>/dev/null || echo "latest")
          FULL_IMAGE="$IMAGE:$TAG"

          echo "Deploying boardgame.io with image: $FULL_IMAGE"

          aws ecr get-login-password --region ${AWS::Region} \
            | docker login --username AWS --password-stdin ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com

          docker pull "$FULL_IMAGE"

          NEW_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$FULL_IMAGE" | cut -d'@' -f2)

          if docker ps --filter "name=boardgame-container" --format '{{.ID}}' | grep -q .; then
              RUNNING_IMAGE=$(docker inspect --format='{{.Image}}' boardgame-container)
              RUNNING_DIGEST=$(docker inspect --format='{{index .RepoDigests 0}}' "$RUNNING_IMAGE" | cut -d'@' -f2 || true)

              if [ "$NEW_DIGEST" = "$RUNNING_DIGEST" ]; then
                  echo "Already running the latest image ($NEW_DIGEST). No restart needed."
                  exit 0
              fi

              echo "New image detected ($NEW_DIGEST). Restarting container..."
              docker stop boardgame-container
              docker rm boardgame-container
          fi

          echo "Starting new container..."
          docker run -d \
            --name boardgame-container \
            --restart unless-stopped \
            -p 8000:8000 \
            "$FULL_IMAGE"

          echo "Deployment complete (digest $NEW_DIGEST)"

          echo "Cleaning up old images..."
          docker image prune -af --filter "until=1h" || true
          EOF

          chmod +x /home/ec2-user/deploy.sh
          chown ec2-user:ec2-user /home/ec2-user/deploy.sh

          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource BoardgameInstance --region ${AWS::Region}

  # --- Custom Resource to Get IPv6 Address ---
  InstanceIPv6Address:
    Type: Custom::GetIPv6
    DependsOn: BoardgameInstance
    Properties:
      ServiceToken: !GetAtt GetIPv6Function.Arn
      InstanceId: !Ref BoardgameInstance

  # --- Route53 AAAA Record ---
  BoardgameAAAARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: AAAA
      TTL: 300
      ResourceRecords:
        - !GetAtt InstanceIPv6Address.Ipv6Address

  # --- ECR Repository ---
  BoardgameEcrRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: board-game-server
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: IMMUTABLE_WITH_EXCLUSION
      ImageTagMutabilityExclusionFilters:
        - ImageTagMutabilityExclusionFilterType: WILDCARD
          ImageTagMutabilityExclusionFilterValue: latest
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Expire untagged images older than 30 days",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

Outputs:
  InstanceId:
    Description: EC2 Instance ID
    Value: !Ref BoardgameInstance
    Export:
      Name: !Sub "${AWS::StackName}-InstanceId"
  SecurityGroupId:
    Value: !Ref BoardgameSecurityGroup
    Export:
      Name: !Sub "${AWS::StackName}-SG"
  IPv6Address:
    Description: Instance IPv6 Address
    Value: !GetAtt InstanceIPv6Address.Ipv6Address
    Export:
      Name: !Sub "${AWS::StackName}-IPv6Address"
  GameServerIPv6URL:
    Description: Direct IPv6 URL for your boardgame.io server
    Value: !Sub "http://[${InstanceIPv6Address.Ipv6Address}]:8000"
  GameServerDomainURL:
    Description: Domain URL for your boardgame.io server
    Value: !Sub "http://${DomainName}:8000"
  DeploymentCommand:
    Description: Command to deploy from GitHub Actions
    Value: !Sub |
      aws ssm send-command --document-name "AWS-RunShellScript" --targets "Key=InstanceIds,Values=${BoardgameInstance}" --parameters "commands=['/home/ec2-user/deploy.sh']" --region ${AWS::Region}
  RepositoryUri:
    Description: URI of the ECR repository
    Value: !GetAtt BoardgameEcrRepository.RepositoryUri
    Export:
      Name: BoardgameEcrRepositoryUri
