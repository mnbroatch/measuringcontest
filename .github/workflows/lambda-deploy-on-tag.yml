name: Deploy Lambdas via Assume Role

on:
  push:
    tags:
      - 'v*'

concurrency:
  group: lambda-deployment
  cancel-in-progress: true  # Cancel old, run new

permissions:
  id-token: write
  contents: read

env:
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_LAMBDA_SYNC_ROLE_NAME: ${{ vars.AWS_LAMBDA_SYNC_ROLE_NAME }}
  AWS_DYNAMODB_ROLE_NAME: ${{ vars.AWS_DYNAMODB_ROLE_NAME }}
  AWS_REGION: ${{ vars.AWS_REGION }}

jobs:
  deploy-lambdas:
    runs-on: ubuntu-latest
    environment: prod

    strategy:
      matrix:
        lambda:
          - name: createroom
            path: lambda/create-room
            zip: createroom.zip
          - name: deleteroom
            path: lambda/delete-room
            zip: deleteroom.zip
          - name: creategame
            path: lambda/create-game
            zip: creategame.zip
          - name: joingame
            path: lambda/join-game
            zip: joingame.zip
          - name: joinroom
            path: lambda/join-room
            zip: joinroom.zip

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_LAMBDA_SYNC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Lambda dependencies
        run: |
          cd ${{ matrix.lambda.path }}
          if [ -f package.json ]; then 
            npm install --production
          fi

      - name: Zip Lambda function
        run: |
          cd ${{ matrix.lambda.path }}
          zip -r ../../${{ matrix.lambda.zip }} .

      - name: Deploy Lambda function (check and create/update)
        run: |
          set -e

          if aws lambda get-function --function-name ${{ matrix.lambda.name }} --region ${{ env.AWS_REGION }}; then
            echo "Function exists. Updating code..."
            aws lambda update-function-code \
              --function-name ${{ matrix.lambda.name }} \
              --zip-file fileb://${{ matrix.lambda.zip }} \
              --region ${{ env.AWS_REGION }}
          else
            echo "Function does not exist. Creating function..."

            aws lambda create-function \
              --function-name ${{ matrix.lambda.name }} \
              --runtime nodejs22.x \
              --role arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_DYNAMODB_ROLE_NAME }} \
              --handler index.handler \
              --zip-file fileb://${{ matrix.lambda.zip }} \
              --region ${{ env.AWS_REGION }}

            echo "Function created."
          fi

      - name: Clean up zip files
        run: rm -f *.zip
