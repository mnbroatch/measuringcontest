name: Build and Push Docker Image to ECR

on:
  push:
    paths:
      - 'server/**'
    tags:
      - 'v*'
  release:
    types: [published]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  AWS_ACCOUNT_ID: ${{ vars.AWS_ACCOUNT_ID }}
  AWS_EC2_SYNC_ROLE_NAME: ${{ vars.AWS_EC2_SYNC_ROLE_NAME }}
  EC2_INSTANCE_ID: ${{ vars.EC2_INSTANCE_ID }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_EC2_SYNC_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Determine image tags
        id: image-tags
        run: |
          # Default tag is the commit SHA
          IMAGE_TAG=${GITHUB_SHA::7}

          # If this is a release, use the release tag
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            IMAGE_TAG=${GITHUB_REF#refs/tags/}
          fi

          # If this is the main branch, also push 'latest'
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            echo "LATEST_TAG=latest" >> $GITHUB_ENV
          fi

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Build Docker image
        run: |
          docker build -t $ECR_REPOSITORY:${IMAGE_TAG} ./server

      - name: Tag Docker image for ECR
        run: |
          docker tag $ECR_REPOSITORY:${IMAGE_TAG} ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${IMAGE_TAG}
          if [ -n "$LATEST_TAG" ]; then
            docker tag $ECR_REPOSITORY:${IMAGE_TAG} ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
          fi

      - name: Push Docker image to ECR (skip if tag already exists)
        run: |
          set -e
          if aws ecr describe-images \
               --repository-name $ECR_REPOSITORY \
               --image-ids imageTag=$IMAGE_TAG \
               --region $AWS_REGION >/dev/null 2>&1; then
            echo "Image tag $IMAGE_TAG already exists in ECR, skipping push."
          else
            echo "Pushing new image $IMAGE_TAG..."
            docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:${IMAGE_TAG}
          fi

          if [ -n "$LATEST_TAG" ]; then
            echo "Pushing 'latest'..."
            docker push ${{ steps.login-ecr.outputs.registry }}/$ECR_REPOSITORY:latest
          fi

      - name: Trigger deployment on EC2
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=${{ env.EC2_INSTANCE_ID }}" \
            --parameters 'commands=["/home/ec2-user/deploy.sh"]' \
            --region $AWS_REGION
